; Variables
(defvar config_home (file-truename (concat (getenv "XDG_CONFIG_HOME") "/emacs")))
(defvar data_home (file-truename (concat (getenv "XDG_DATA_HOME") "/emacs")))
(defvar cache_home (file-truename (concat (getenv "XDG_CACHE_HOME") "/emacs")))

(setq user-emacs-directory config_home)
(setq make-backup-files nil)
(setq auto-save-default nil)

; PATHs
(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq eshell-path-env (getenv "PATH"))

; Set up package management
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("marmalade" . "http://marmalade-repo.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")
			 ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
(defun require-package (package)
  (setq-default highlight-tabs t)
  "Install given package."
  (unless (package-installed-p package)
    (unless (assoc package package-archive-contents) (package-refresh-contents))
    (package-install package)))

; Desired packages
(require-package 'evil)
(require-package 'org-plus-contrib)
(require-package 'powerline)
(require-package 'dired+)

; Modes
(evil-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)

; Remove this every time we start emacs
(delete-directory "~/.emacs.d" 1)

; Remove the startup messages
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

; Mappings
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
      '(lambda()
          (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

(evil-define-key 'normal image-dired-thumbnail-mode-map
  (kbd "RET") 'image-dired-display-thumbnail-original-image
  (kbd "h") 'image-dired-backward-image
  (kbd "l") 'image-dired-forward-image)