" Add My Settings Folder and make vim respect XDG Base Directories
	set rtp=$HOME/.config/vim,$VIM,$VIMRUNTIME
	set viewdir=$HOME/.cache/vim/view

" Addon Settings
	" Set up Vundle to do its magic
		filetype off
		let mapleader = ","
		set rtp+=$HOME/.local/share/vim/bundle/vundle
		call vundle#rc()
		let g:bundle_dir = expand('$HOME/.local/share/vim/bundle')
		Bundle 'gmarik/vundle'
	" Bundle and Configure Addons ($lang conf in 'settings/ftplugin/$lang.vim')
		" Documentation
			" Python
				Bundle 'fs111/pydoc.vim'
		" Git
			Bundle 'tpope/vim-fugitive'
			Bundle 'tpope/vim-git'
			Bundle 'airblade/vim-gitgutter'
			:command! Gpush Git push origin master
		" Interface/Navigation addons
			" Note Taking
				Bundle 'vimoutliner/vimoutliner'
					" Mappings to change code to and from outlines
					map <leader>oc :s/^/<\ /<cr>:noh<cr>
					map <leader>oC :s/^	*<\ \=//<cr>:noh<cr>
					" Mapping to create paragraphs from visual blocks of
					" HTML paragraphs pasted over
					map <leader>op :s/^\(\t*:\)\(.\+\)/\1____\2/<cr>gvgqgv:s/____/\ \ \ \ /g<cr>gv:s/^\t*:\s*\n//<cr>:noh<cr>
					" Mapping to wrap citations
					map <leader>oq :s/^\(\t*\:\)\(\d\+\)/\1\ \ \ \ \2/<cr>gvgqgv:s/^\(\t*:\)\ \ \ \ \(\d\+\.*\ \)/\1\2/<cr>gv:s/^\(\t*\):/\1</<cr>gv:s/^\t*<\s*\n//<cr>:noh<cr>
					" Mapping to swap from wrapping to static text in V-block
					map <leader>os :s/^\(\t*\):/\1</<cr>:noh<cr>
			" Text alignment
				Bundle 'godlygeek/tabular'
				Bundle 'maksimr/vim-jsbeautify'
				map <leader>tj :call RangeJsBeautify()<cr>
			" Revision History
				Bundle 'sjl/gundo.vim'
					map <leader>g :GundoToggle<CR>
			" File Management
				Bundle 'scrooloose/nerdtree'
					map <leader>n :NERDTree<CR>
			" Tag outliner
				Bundle 'majutsushi/tagbar'
					map <leader>m :TagbarToggle<CR>
			" List toggle
				Bundle 'Valloric/ListToggle'
			" Shell
				Bundle 'rosenfeld/conque-term'
		" Search Addons
			" Enable Ack Searching
				Bundle 'mileszs/ack.vim'
					nmap <leader>a <Esc>:Ack! 
			" Search Buffers/Filenames+Paths for navigation
				Bundle 'kien/ctrlp.vim'
				let g:ctrlp_custom_ignore = {
					\ 'dir': '\.git$\|\.svn$\|\.hg$\|build$\|venv\|^output$',
					\ 'file': '\.pyc$\|\.so$\|\.class$\|.swp$\|\.pid\|\.beam$',
					\ }
				map <leader>b :CtrlPBuffer<cr>
				map <leader>f :CtrlPMRU<cr>
				let g:ctrlp_match_window = 'max:30'
		" Syntax Highlighting
			" CSS3
				Bundle 'hail2u/vim-css3-syntax'
				Bundle 'ap/vim-css-color'
			" HTML5
				Bundle 'othree/html5.vim'
			" JINJA
				Bundle 'lepture/vim-jinja'
			" Javascript
				Bundle 'jelera/vim-javascript-syntax'
				Bundle 'pangloss/vim-javascript'
			" JSON
				Bundle 'elzr/vim-json'
			" LESS
				Bundle 'groenewege/vim-less'
			" Prolog
				Bundle 'adimit/prolog.vim'
			" CSV
				Bundle 'csv.vim'
		" Syntax Testing
			Bundle 'scrooloose/syntastic'
				let g:syntastic_auto_loc_list=2
				let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
				let g:syntastic_check_on_wq = 0
				let g:syntastic_aggregate_errors = 1
				let g:syntastic_always_populate_loc_list = 1
				map <F5> :SyntasticCheck<cr>
			" Python
				Bundle 'alfredodeza/pytest.vim'
		" Typing Efficiency Improvers
			" Snippets
				Bundle 'SirVer/ultisnips'
			" Change the Surroundings of Text
				Bundle 'tpope/vim-surround'
			" Semantic completion
				Bundle 'Valloric/YouCompleteMe'
				Bundle 'marijnh/tern_for_vim'
			" Quicker Commenting/Uncommenting
				Bundle 'scrooloose/nerdcommenter'
				let g:NERDSpaceDelims = 1   " Put spaces around comment strings

" Indentation Settings
	set shiftround							" Indents rounded to shiftwidths
	set copyindent							" Maintain current indent on next line
	set preserveindent						" Try not to mess with indentation
	set autoindent							" Enables autoindent
	set smartindent							" Enables smartindent
	set shiftwidth=4						" Indentation at 4 width
	set tabstop=4							" Tabs at 4 width
	set softtabstop=4						" Soft tabs at 4 width
	set textwidth=79						" Line wrap at 80 characters
	if v:version >= 703
		set colorcolumn=+1					" Colours the column following that
	endif
	set fo+=t								" Enables autowrap
	set wrap								" Enables line wrapping for long lines
	set breakindent							" For soft wraps, indent newlines
	filetype on								" Enable filetype-specific settings
	filetype plugin indent on				" Enable filetype-specific indentation
	set list								" Show whitespace
	set listchars=tab:│\ ,trail:-			" Show these whitespaces by default
	let g:pyindent_open_paren = '&sw'		" Indent 1 sw after ( in python
	let g:pyindent_nested_paren = '&sw'		" Indent 1 sw after nested () in py
	let g:pyindent_continue = '&sw'			" Indent 1 sw for continuation

" Folding settings
	set foldmethod=indent					" Enable Folding
	set foldlevelstart=99					" Start at fold level 99
	" Save fold settings
		au BufWinLeave *.* mkview!
		au BufWinEnter *.* silent loadview

" Search settings
	set ignorecase							" Ignores cases in searching
	set smartcase							" Smart case matching
	set hlsearch							" Highlight search results
	set incsearch							" Search incrementally

" General settings
	set ffs=unix							" Unix as standard filetype
	set encoding=utf-8						" UTF-8 as standard encoding
	set nocompatible						" Enable vimness
	set autoread							" Automatically detect outside changes
	set history=1000						" Massive history
	set completeopt=menuone,longest,preview	" Set autocompletion options
	set omnifunc=syntaxcomplete#Complete	" Enable Omnicompletion
	set exrc								" Per-directory vimrcs
	set secure								" Disable insecure local vimrc commands
	set modeline							" Vim settings in files
	set noswapfile							" Stop littering these things
	set viminfo+=n$HOME/.cache/vim/history	" Less things in home
	set tabpagemax=100
	set spelllang=en_au,de					" English-Aus, German for words
	set clipboard=unnamedplus				" Use system clipboard by default

" UI Settings
	set showcmd								" Shows Current Command
	set showfulltag							" Increase info for tag completion
	set number								" Line Numbers
	set ruler								" Show position at bottom
	set lazyredraw							" Do not redraw whilst executing macros
	set noerrorbells novisualbell			" Shut the warnings up
	syntax on								" Enable syntax highlighting
	set showmatch							" Highlight matching brackets
	set mat=2								" Blink that highlight at 0.2s
	set wildmenu							" Good menu tab completion
	set wildmode=list:longest,full			" Set menu completion style
	set wildignore=*.o,*~,~.pyc				" Ignore compiled files
	au BufReadPost *						" Go to last position on file open
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\	exe "normal! g`\"" |
	\ endif
	set laststatus=2						" Always show statusline
	" file, helpfile, modified, readonly, split,  cursor location, V%
	set statusline=%<%f\ %h%m%r%{SyntasticStatuslineFlag()}%=%-14.(%l,%c,%V%)\ %P
	set t_Co=256							" 256 Colours in Terminal
	colo darko								" Load my colourscheme

" Input/Hotkey settings
	set mouse=a								" Enable Mouse
	" Stop mousewheel and clicking from inserting letters
	if has("mouse_sgr")
		set ttymouse=sgr
	else
		set ttymouse=xterm2
	end
	set backspace=eol,start,indent			" Proper backspace behaviour
	" tabbing
		map <C-t> :tabnew 
	let g:clipbrdDefaultReg="+"				" Use Linux clipboard as def copy reg
	" easy buffer navigation
		map <leader>B :buffers<CR>:buffer 
	" Make shift-insert work as linux paste
		map <S-Insert> <MiddleMouse>
		map! <S-Insert> <MiddleMouse>
	" Recall recent file list
		map <leader>r :browse oldfiles<CR>
	" Fix control-arrows in tmux
	if &term =~ '^screen'
		execute "set <xUp>=\e[1;*A"
		execute "set <xDown>=\e[1;*B"
		execute "set <xRight>=\e[1;*C"
		execute "set <xLeft>=\e[1;*D"
	endif
	" Move lines around with C_↓ or C_↑
		nmap <silent> <c-down> mz:m+<CR>`z
		nmap <silent> <c-up> mz:m-2<CR>`z
		vmap <silent> <c-down> :m'>+<CR>`<my`>mzgv`yo`z
		vmap <silent> <c-up> :m'<-2<CR>`>my`<mzgv`yo`z
	" Move splits around with C_h/j/k/l
		map <c-l> <c-w>l
		map <c-h> <c-w>h
		map <c-k> <c-w>k
		map <c-j> <c-w>j
	" Map hard BOL to soft BOL
		map 0 ^
	" Open with file's directory filled in
		map <leader>e :e <C-R>=expand('%:p:h') . '/'<CR>
	" insert current file's directory in prompt
		cabbr <expr> %% expand('%:p:h')
	" Swap braces to/from being on their own line (c-like languages)
		function! MoveBraces(brace)
			let searchString = '\n\s*'.a:brace
			if search(searchString)
				exec '%s/'.searchString.'/'.a:brace.'/g'
			else
				if a:brace ==# "}"
					exec 'g!/[^;]}\+;/s/}/\r}/g'
				elseif a:brace ==# "{"
					exec '%s/{$/\r{/g'
				endif
				normal gg=G
			endif
		endfunction
		map <leader>{ :call MoveBraces("{")<CR>
		map <leader>} :call MoveBraces("}")<CR>
	" Clear search results
		map <leader>cS :noh<cr>
	" Centers Search results
		nnoremap n nzz
		nnoremap N Nzz
		nnoremap * *zz
		nnoremap # #zz
		nnoremap g* g*zz
		nnoremap g# g#zz
	" Show word's syntax group with C_S_p
		nmap <C-S-P> :call <SID>SynStack()<CR>
		function! <SID>SynStack()
			if !exists("*synstack")
				return
			endif
			echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
		endfunc

" Session Management
	" Save
		func! <SID>Savesession()
			if v:this_session == ""
				let cmd = "mksession! $HOME/.cache/vim/sessions/default.vim"
			else
				let cmd = "mksession! ".v:this_session
			endif
			echo cmd
			exec cmd
		endfunc
		nmap <leader>sw <ESC>:call <SID>Savesession()<cr>:wa<cr>
	" Save+Quit
		nmap <leader>sq <ESC>:call <SID>Savesession()<cr>:wqa<cr>
	" Save As
		nmap <leader>sa :wa<cr>:mksession! $HOME/.cache/vim/sessions/
	" Restore As (Open)
		nmap <leader>so :so $HOME/.cache/vim/sessions/

" Saving Improvements
	" Use ,W to save the current file with sudo
		nmap <leader>W :w !sudo tee %<cr><cr>
	" Create directories if they don't exist
		function s:MkNonExDir(file, buf)
		if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
			let dir=fnamemodify(a:file, ':h')
			if !isdirectory(dir)
				call mkdir(dir, 'p')
			endif
		endif
		endfunction
		augroup BWCCreateDir
			autocmd!
			autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
		augroup END
